esphome:
  name: hydro-control-1
  friendly_name: Contrôle Hydroponique 1
  compile_process_limit: 1
#  includes:
#    - hydro-control/nutrient_limit_functions.h

packages:
  nutrient_limit: !include nutrient_limit.yaml

# PH Calibration (no way to make it from device by now)
substitutions:
  #ph_918: "2.62"
  #ph_686: "1.82"
  ph_7: "1.84"
  ph_4: "0.516"
  #ph_401: "0.541"

  ec_ratio: "2.18"

  # 60s = 93.5ml -> ratio = 60000 / 93.5 = 645.2
  pump1_ml_to_ms_ratio: "645.2"
  # 60s = 103.8ml -> ratio = 60000 / 103.8 = 578.03
  pump2_ml_to_ms_ratio: "578.03"
  # 60s = 98.4 -> ratio = 60000 / 98.4 == 609.76
  pump3_ml_to_ms_ratio: "609.76"

#EC calibration is set directly in sensor parameters

esp8266:
  board: d1
    # Attention à limiter au maximum les options "restore_value"
  restore_from_flash: true

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_encryption_key

ota:
  - platform: esphome
    password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Test1 Fallback Hotspot"
    password: !secret fallback_hotspot_password

captive_portal:

# globals
globals:
  # EC calibration (raw value with only median filter)
  - id: ec_raw_median
    type: float
    restore_value: false
    initial_value: '0.0'

  - id: ec_base
    type: float
    restore_value: false
    initial_value: '0.0'

  # PH calibration (raw value with only median filter)
  - id: ph_raw_median
    type: float
    restore_value: false
    initial_value: '0.0'

# Buses
i2c:
  #sda: GPIO4 #D2
  #scl: GPIO5 #D1
  scan: True
  id: bus_a
  frequency: 800kHz

one_wire:
  - platform: gpio
    pin: D5

# Periphériques I2C
ads1115:
  - address: 0x48

# Ecran
font:
  - file:
      type: gfonts
      family: Roboto
      weight: 400
    id: roboto
    size: 16
    glyphs:
      ['&', '@', '!', ',', '.', '"', '%', '(', ')', '+', '-', '_', ':', '°', '0',
       '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E',
       'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',
       'T', 'U', 'V', 'W', 'X', 'Y', 'Z', ' ', 'a', 'b', 'c', 'd', 'e', 'f',
       'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
       'u', 'v', 'w', 'x', 'y', 'z','å', 'ä', 'ö', '/', '>','µ']

display:
  - platform: ssd1306_i2c
    model: "SH1106 128x64"
    address: 0x3C
    update_interval: 2s
    contrast: 60%
    auto_clear_enabled: true
    id: main_display
    pages:
    - id: page1
      lambda: |-
        it.printf(0, 0, id(roboto), "PH : %.2f", id(ph_sensor).state );
        it.printf(0, 16, id(roboto), "EC : %.0f µS/cm", id(ec_sensor).state );
        it.printf(0, 32, id(roboto), "TH : %.1f °C", id(temperature_sensor).state );
        if (id(ph_minus_pulse).is_running()) {
          it.filled_rectangle(0, 48, 48, 16, COLOR_ON);
          it.print(0, 48, id(roboto), COLOR_OFF, "PH-");
        }else if(id(ph_error).state){
          it.filled_rectangle(0, 48, 48, 16, COLOR_ON);
          it.print(0, 48, id(roboto), COLOR_OFF, "PH KO");
        }
        if (id(nutrient_pulse).is_running()) {
          it.filled_rectangle(50, 48, 48, 16, COLOR_ON);
          it.print(50, 48, id(roboto), COLOR_OFF, "EC+");
        }else if(id(ec_error).state){
          it.filled_rectangle(0, 48, 48, 16, COLOR_ON);
          it.print(50, 48, id(roboto), COLOR_OFF, "EC KO");
        }
    - id: page2
      lambda: |-
        it.printf(0, 0, id(roboto), "PHmv: %.5f", id(ph_raw_median) );
        it.printf(0, 16, id(roboto), "ECmv: %.5f", id(ec_raw_median) );
        it.printf(0, 32, id(roboto), "ECbase: %.5f", id(ec_base) );

# Sensors
binary_sensor:
  - platform: gpio
    pin:
      number: D0
      mode:
        input: true
        pullup: true
    name: page suivante
    id: next_page_btn
    filters:
      - delayed_on: 10ms
      - delayed_off: 10ms
    on_press:
      then:
        - display.page.show_next: main_display
        - component.update: main_display

  # empty tank alert triggered by extremely low EC.
  - platform: template
    name: "Empty tank alert"
    id: empty_tank_alert
    lambda: |-
      return id(ec_sensor).state < 100;

  # Error status
  - platform: template
    name: "PH Error"
    id: ph_error
    lambda: |-
      return (id(ph_sensor).state < id(ph_error_below).state) || (id(ph_sensor).state > id(ph_error_over).state);

  - platform: template
    name: "EC Error"
    id: ec_error
    lambda: |-
      return (id(ec_sensor).state < id(ec_error_below).state) || (id(ec_sensor).state > id(ec_error_over).state);


sensor:
  - platform: ads1115
    multiplexer: 'A0_GND'
    gain: 4.096
    name: "PH"
    update_interval: 2s
    id: ph_sensor
    accuracy_decimals: 2
    filters:
      - sliding_window_moving_average:
          window_size: 10
          send_every: 1
          send_first_at: 1
      - lambda: |-
          id(ph_raw_median) = x;
          return x;
      - calibrate_linear:
          # Map v (from sensor) -> PH (true value)
          #- ${ph_918} -> 9.18
          #- ${ph_686} -> 6.86
          - ${ph_7} -> 7.0
          #- ${ph_401} -> 4.01
          - ${ph_4} -> 4.0

  - platform: ads1115
    multiplexer: 'A1_GND'
    gain: 4.096
    name: "EC"
    update_interval: 1s
    id: ec_sensor
    accuracy_decimals: 0
    filters:
      - median:
          window_size: 30
          send_every: 1
          send_first_at: 1
      - lambda: |-
            id(ec_raw_median) = x;
            float compensationCoefficient = 1.0 + 0.02 * (id(temperature_sensor).state - 25.0); //temperature compensation formula: fFinalResult(25^C) = fFinalResult(current)/(1.0+0.02*(fTP-25.0));
            float compensationVoltage = x / compensationCoefficient; //temperature compensation
            float tdsValue = (133.42 * compensationVoltage * compensationVoltage * compensationVoltage - 255.86 * compensationVoltage * compensationVoltage + 857.39 * compensationVoltage) * 0.5; //convert voltage value to tds value
            //return tdsValue / 0.64;
            id(ec_base) = tdsValue;
            return tdsValue * ${ec_ratio}; // Comparaison empirique avec mon ec mètre.

  - platform: dallas_temp
    address: 0xa6b297791f64ff28
    name: "Temperature"
    id: temperature_sensor

# Outputs

switch:
  # Pump #1 : PH-
  - platform: gpio
    pin: 
      number: GPIO12
    id: pump_1
    name: "Pompe PH-"
    icon: "mdi:water-plus"
    
  # Pump #2 : Nutrient A
  - platform: gpio
    pin: 
      number: GPIO13
    id: pump_2
    name: "Pompe nutrient A"
    icon: "mdi:water-plus"
    
  # Pump #3 : Nutrient B
  - platform: gpio
    pin: 
      number: GPIO15
    id: pump_3
    name: "Pompe nutrient B"
    icon: "mdi:water-plus"

  # Mixer
  - platform: gpio
    pin: 
      number: GPIO0
    id: mixer
    name: "Mixer"
    icon: "mdi:bowl-mix"

  - platform: template
    name: "PH regulation"
    id: ph_regulation_enabled
    icon: "mdi:auto-fix"
    optimistic : true
    restore_mode: "RESTORE_DEFAULT_ON"

  - platform: template
    name: "Nutrient regulation"
    id: nutrient_regulation_enabled
    icon: "mdi:auto-fix"
    optimistic : true
    restore_mode: "RESTORE_DEFAULT_ON"

  - platform: template
    name: "Mixer loop"
    id: mixer_loop_enabled
    icon: "mdi:bowl-mix"
    optimistic: True
    restore_mode: RESTORE_DEFAULT_ON

# HA Input
button:
  - platform: template
    name: Ecran - page suivante
    id: next_page_ha_btn
    icon: "mdi:page-next"
    on_press:
      then:
        - display.page.show_next: main_display
        - component.update: main_display

  - platform: template
    id: ph_pulse_btn
    name: "Pulse PH-"
    icon: "mdi:water-plus"
    on_press:
      - script.execute: ph_minus_pulse

  - platform: template
    id: nutrient_pulse_btn
    name: "Pulse A+B nutrient"
    icon: "mdi:water-plus"
    on_press:
      - script.execute: nutrient_pulse

  - platform: template
    id: pump_1_calibration_pulse
    name: "Pump 1 calibration pulse"
    icon: "mdi:water-plus"
    on_press:
      - switch.turn_on: pump_1
      - delay: 1min
      - switch.turn_off: pump_1

  - platform: template
    id: pump_2_calibration_pulse
    name: "Pump 2 calibration pulse"
    icon: "mdi:water-plus"
    on_press:
      - switch.turn_on: pump_2
      - delay: 1min
      - switch.turn_off: pump_2

  - platform: template
    id: pump_3_calibration_pulse
    name: "Pump 3 calibration pulse"
    icon: "mdi:water-plus"
    on_press:
      - switch.turn_on: pump_3
      - delay: 1min
      - switch.turn_off: pump_3

number:

  - platform: template
    name: PH high trigger
    id: ph_high_trigger
    min_value: 4
    max_value: 9
    step: 0.1
    optimistic: true
    restore_value: true
    initial_value: 6.2

  - platform: template
    name: EC low trigger
    id: ec_low_trigger
    min_value: 0
    max_value: 3000
    step: 100
    optimistic: true
    restore_value: true
    initial_value: 1200

  - platform: template
    name: PH pulse
    id: ph_pulse_ml
    min_value: 0
    max_value: 30
    step: 1
    unit_of_measurement: ml
    optimistic: true
    restore_value: true
    initial_value: 5

  - platform: template
    name: Nutrient A pulse
    id: nutrient_a_pulse_ml
    min_value: 0
    max_value: 30
    step: 0.1
    unit_of_measurement: ml
    optimistic: true
    restore_value: true
    initial_value: 25

  - platform: template
    name: Nutrient B pulse
    id: nutrient_b_pulse_ml
    min_value: 0
    max_value: 40
    step: 0.1
    unit_of_measurement: ml
    optimistic: true
    restore_value: true
    initial_value: 35

  - platform: template
    name: PH error below
    id: ph_error_below
    min_value: 4
    max_value: 9
    step: 0.1
    optimistic: true
    restore_value: true
    initial_value: 5

  - platform: template
    name: PH error over
    id: ph_error_over
    min_value: 4
    max_value: 9
    step: 0.1
    optimistic: true
    restore_value: true
    initial_value: 5

  - platform: template
    name: EC error below
    id: ec_error_below
    min_value: 0
    max_value: 3000
    step: 100
    optimistic: true
    restore_value: true
    initial_value: 300

  - platform: template
    name: EC error over
    id: ec_error_over
    min_value: 0
    max_value: 3000
    step: 100
    optimistic: true
    restore_value: true
    initial_value: 1900

script:
  # PH minus pulse sequence
  - id: ph_minus_pulse
    mode: single
    then:
      - script.execute: mixer_pulse # launch mixer to ensure good measure after adding product
      - switch.turn_on: pump_1
      - delay: !lambda 'return id(ph_pulse_ml).state * ${pump1_ml_to_ms_ratio};'
      - switch.turn_off: pump_1
      # 30s minimum delay before trying adding again.
      - delay: 30s

  # Nutrient A+B pulse sequence
  - id: nutrient_pulse
    mode: single
    then:
      if:
        condition: 
          lambda: |-
              return nutrient_limiter->addIfPossible(
                id(nutrient_a_pulse_ml).state + id(nutrient_b_pulse_ml).state
              );
        then:
        - script.execute: mixer_pulse # launch mixer to ensure good measure after adding product
        - switch.turn_on: pump_2
        - delay: !lambda 'return id(nutrient_a_pulse_ml).state * ${pump2_ml_to_ms_ratio};'
        - switch.turn_off: pump_2
        - switch.turn_on: pump_3
        - delay: !lambda 'return id(nutrient_b_pulse_ml).state * ${pump3_ml_to_ms_ratio};'
        - switch.turn_off: pump_3      
        # 30s minimum delay before trying adding again.
        - delay: 30s

  # Mixer pulse
  - id: mixer_pulse
    mode: restart
    then:
      - switch.turn_on: mixer
      - delay: 5min
      - switch.turn_off: mixer

interval:

  # PH check loop
  - interval: 1min
    then:
      if:
        condition:
          - switch.is_on: ph_regulation_enabled
          - lambda: 'return id(ph_sensor).state > id(ph_high_trigger).state;'
          - binary_sensor.is_off: empty_tank_alert
          - binary_sensor.is_off: ph_error
          - not:
            - script.is_running: ph_minus_pulse
        then:
          script.execute: ph_minus_pulse

  # EC check loop
  - interval: 1min
    then:
      if:
        condition:
          - switch.is_on: nutrient_regulation_enabled
          - lambda: 'return id(ec_sensor).state < id(ec_low_trigger).state;'
          - binary_sensor.is_off: empty_tank_alert
          - binary_sensor.is_off: ec_error
          - not:
            - script.is_running: nutrient_pulse
        then:
          script.execute: nutrient_pulse

  # Mixer loop
  - interval: 60min
    then:
      if:
        condition:
          - switch.is_on: mixer_loop_enabled
          - binary_sensor.is_off: empty_tank_alert
          - binary_sensor.is_off: ec_error
        then:
          script.execute: mixer_pulse